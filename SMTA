# -*- coding: utf-8 -*-
"""stockpredict_ShashwatSinghRaghav.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u9Rqju_vX8NbVAC1lgPQCxtL2Re7U0wY
"""

#libraries
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

df = web.DataReader('ONGC.NS', data_source='yahoo',start='2020-01-01',end='2020-12-31')
#Show data
df

#Get Number rows and colums
df.shape

#Graph of closing price
plt.figure(figsize=(20,10))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD ($)',fontsize=18)
plt.show()

#Create data frame from close
data = df.filter(['Close'])
#dataframe to array
dataset = data.values
#Number of rows to train
training_data_len = math.ceil(len(dataset)* .8)
training_data_len

#scale data
 scaler = MinMaxScaler(feature_range=(0,1))
 scaled_data = scaler.fit_transform(dataset)
 scaled_data

#train dataset
#scale train data set
train_data = scaled_data[0:training_data_len,:]
#split data in x and y
x_train =[]
y_train =[]

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i,0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

#convert x and y to array
x_train, y_train = np.array(x_train), np.array(y_train)

#reshape
x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#LSTM model
model = Sequential()
model.add(LSTM(50 ,return_sequences=True, input_shape = (x_train.shape[1],1)))
model.add(LSTM(50 ,return_sequences=False))
model.add(Dense(12))
model.add(Dense(1))

#Compile 
model.compile(optimizer = 'adam',loss = 'mean_squared_error')

#train
model.fit(x_train, y_train, batch_size=1, epochs=1)

#test
test_data = scaled_data[training_data_len - 60: , :]
x_test = []
y_test = dataset[training_data_len: , :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i,0])

#Conver data to array
x_test = np.array(x_test)

#reshape 2d to 3d
x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

#Predicted price
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#RMSE
rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse

#plot
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Close Price INR ', fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train','Val','Predictions'],loc = 'lower right')
plt.show()

#valid and predicted price
valid

aq = web.DataReader('ONGC.NS', data_source='yahoo',start='2020-03-01',end='2020-07-04')
new_df = aq.filter(['Close'])
last_60_days = new_df[-60:].values 
last_60_days_scaled = scaler.transform(last_60_days)
X_test = []
X_test.append(last_60_days_scaled)
X_test = np.array(X_test)
X_test = np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
pred_price = model.predict(X_test)
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

aq2 = web.DataReader('ONGC.NS', data_source='yahoo',start='2020-01-01',end='2020-12-31')
print(aq2['Close'])